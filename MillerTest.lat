int mulmod(int a, int b, int mod) {
    int x = 0, y = a % mod;
    while (b > 0) {
        if (b % 2 == 1) {
            x = (x + y) % mod;
        }
        y = (y * 2) % mod;
        b = b / 2;
    }
    return x % mod;
}

int modulo(int base, int exponent, int mod) {
    int x = 1;
    int y = base;
    while (exponent > 0) {
        if (exponent % 2 == 1)
            x = (x * y) % mod;
        y = (y * y) % mod;
        exponent = exponent / 2;
    }
    return x % mod;
}

int Miller(int p, int iteration) {
    int rand = 2137;

    int i;
    int s;
    if (p < 2) {
        return 0;
    }
    if (p != 2 && p % 2 == 0) {
        return 0;
    }
    s = p - 1;
    while (s % 2 == 0) {
        s = s / 2;
    }
    i = 0;
    while (i < iteration) {
        int a = rand % (p - 1) + 1, temp = s;

        int mod = modulo(a, temp, p);
        while (temp != p - 1 && mod != 1 && mod != p - 1) {
            mod = mulmod(mod, mod, p);
            temp = temp * 2;
        }
        if (mod != p - 1 && temp % 2 == 0) {
            return 0;
        }
        i++;

        rand = rand * 29;
        rand = rand % (p - 1);
    }
    return 1;
}

int dummyPrimeTest(int x) {
    int i = 2;
    while (i < x) {
        if (x % i == 0) {
            return 0;
        }
        i++;
    }
    return 1;
}

int main() {
    int i = 2;
    int cnt = 0;
    while (i < 10000) {
        int x = Miller(i, 5000);
        if (dummyPrimeTest(i) != x) {
            printInt(Miller(i, 5000));
            printInt(dummyPrimeTest(i));
            printInt(i);
            error();
        }
        if (x == 1) {
            cnt++;
        }
        i++;
    }
    printInt(cnt);
    return 0;
}
