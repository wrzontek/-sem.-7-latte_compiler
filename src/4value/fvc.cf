entrypoints Program;

Prog. Program ::= [CodeBlock] ;

Block.        CodeBlock ::= Ident ":" [NonJmpStmt] JmpStmt;

StmtBinOp.      NonJmpStmt ::= Ident ":=" Atom ArithOp Atom ;
StmtNoOp.       NonJmpStmt ::= Ident ":=" Atom ;
StmtCallAss.    NonJmpStmt ::= Ident ":=" Call ;
StmtCallExpr.   NonJmpStmt ::= Call ;
StmtInc.        NonJmpStmt ::= Ident "++" ;
StmtDecr.       NonJmpStmt ::= Ident "--" ;

FunctionCall.   Call ::= "call" Ident [ Atom ] ;

StmtGoto.           JmpStmt ::= "goto" Ident ; -- todo trzeba uważać na zmienne nazwana goto itp
StmtGoNext.         JmpStmt ::= "__go_next__;
StmtCondJmp.        JmpStmt ::= "if" Atom RelOp Atom "then" "goto" Ident "else" "goto" Ident;
StmtRet.            JmpStmt ::= "return" Atom ;
StmtVRet.           JmpStmt ::= "return" ; -- todo konflikt? chyba niegroźny shift/reduce

AtomVar.   Atom ::= Ident ; -- variable or string constant
AtomInt.   Atom ::= Integer ;
AtomStr.   Atom ::= String ;

AddOp.  ArithOp ::= "+" ;
SubOp.  ArithOp ::= "-" ;
MulOp.  ArithOp ::= "*" ;
DivOp.  ArithOp ::= "/" ;
ModOp.  ArithOp ::= "%" ;

LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

separator CodeBlock "" ;
separator NonJmpStmt "" ;
separator Atom "" ;

comment ";" ;