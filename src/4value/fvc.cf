entrypoints Program;

token UIdent (( letter | '_') ( letter | digit | '_' | '\'')*) ; -- '_' can be first character

Prog. Program ::= [CodeBlock] ;

Block.        CodeBlock ::= UIdent ":" [NonJmpStmt] [JmpStmt] ; -- TODO może być np return 0 _go_next, po prostu brać pierwsze resztę wywalić

StmtBinOp.      NonJmpStmt ::= UIdent ":=" Atom BinOp Atom ;
StmtNegOp.      NonJmpStmt ::= UIdent ":=" "-" Atom ;
StmtNoOp.       NonJmpStmt ::= UIdent ":=" Atom ;
StmtCall.       NonJmpStmt ::= UIdent ":=" "_call" UIdent [Atom] ";" ;
StmtInc.        NonJmpStmt ::= UIdent "++" ;
StmtDecr.       NonJmpStmt ::= UIdent "--" ;

StmtGoto.           JmpStmt ::= "_goto" UIdent ;
StmtGoNext.         JmpStmt ::= "_go_next" UIdent ;
StmtCondJmp.        JmpStmt ::= "if" Atom "then" "_goto" UIdent "else" "_goto" UIdent;
StmtRet.            JmpStmt ::= "return" Atom ;
StmtVRet.           JmpStmt ::= "return;" ;

AtomVar.   Atom ::= UIdent ;
AtomInt.   Atom ::= Integer ;
AtomStr.   Atom ::= String ;

AddOp.      BinOp ::= "+" ;
SubOp.      BinOp ::= "-" ;
MulOp.      BinOp ::= "*" ;
DivOp.      BinOp ::= "/" ;

LTH.       BinOp ::= "<" ;
LE.        BinOp ::= "<=" ;
GTH.       BinOp ::= ">" ;
GE.        BinOp ::= ">=" ;
EQU.       BinOp ::= "==" ;
NE.        BinOp ::= "!=" ;

separator CodeBlock "" ;
separator NonJmpStmt "" ;
separator nonempty JmpStmt "" ;
separator Atom "" ;

comment ";" ;