/* File generated by the BNF Converter (bnfc 2.9.3). */

#ifndef PRINTER_HEADER
#define PRINTER_HEADER

#include "Absyn.H"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>


/* Certain applications may improve performance by changing the buffer size */
#define BUFFER_INITIAL 2000
/* You may wish to change _L_PAREN or _R_PAREN */
#define _L_PAREN '('
#define _R_PAREN ')'

class PrintAbsyn : public Visitor {
protected:
    int _n_, _i_;
    /* The following are simple heuristics for rendering terminals */
    /* You may wish to change them */
    void render(Char c);

    void render(String s);

    void render(const char *s);

    void indent(void);

    void backup(void);

    void onEmptyLine(void);

    void removeTrailingSpaces(void);

    void removeTrailingWhitespace(void);

public:
    PrintAbsyn(void);

    ~PrintAbsyn(void);

    char *print(Visitable *v);

    void visitProgram(Program *p); /* abstract class */
    void visitProg(Prog *p);

    void visitTopDef(TopDef *p); /* abstract class */
    void visitFnDef(FnDef *p);

    void visitClassDef(ClassDef *p);

    void visitClassExtendDef(ClassExtendDef *p);

    void visitListClassMember(ListClassMember *p);

    void iterListClassMember(ListClassMember::const_iterator i, ListClassMember::const_iterator j);

    void visitListTopDef(ListTopDef *p);

    void iterListTopDef(ListTopDef::const_iterator i, ListTopDef::const_iterator j);

    void visitArg(Arg *p); /* abstract class */
    void visitAr(Ar *p);

    void visitListArg(ListArg *p);

    void iterListArg(ListArg::const_iterator i, ListArg::const_iterator j);

    void visitClassMember(ClassMember *p); /* abstract class */
    void visitAttrMember(AttrMember *p);

    void visitMethodMember(MethodMember *p);

    void visitBlock(Block *p); /* abstract class */
    void visitBlk(Blk *p);

    void visitListStmt(ListStmt *p);

    void iterListStmt(ListStmt::const_iterator i, ListStmt::const_iterator j);

    void visitStmt(Stmt *p); /* abstract class */
    void visitEmpty(Empty *p);

    void visitBStmt(BStmt *p);

    void visitDecl(Decl *p);

    void visitAss(Ass *p);

    void visitIncr(Incr *p);

    void visitDecr(Decr *p);

    void visitRet(Ret *p);

    void visitVRet(VRet *p);

    void visitCond(Cond *p);

    void visitCondElse(CondElse *p);

    void visitWhile(While *p);

    void visitForEach(ForEach *p);

    void visitSExp(SExp *p);

    void visitItem(Item *p); /* abstract class */
    void visitNoInit(NoInit *p);

    void visitInit(Init *p);

    void visitListItem(ListItem *p);

    void iterListItem(ListItem::const_iterator i, ListItem::const_iterator j);

    void visitComplexStart(ComplexStart *p); /* abstract class */
    void visitCBracketed(CBracketed *p);

    void visitCMember(CMember *p);

    void visitCArray(CArray *p);

    void visitCFunction(CFunction *p);

    void visitNewObject(NewObject *p);

    void visitComplexPart(ComplexPart *p); /* abstract class */
    void visitVariable(Variable *p);

    void visitArrElement(ArrElement *p);

    void visitMethod(Method *p);

    void visitMemberAccess(MemberAccess *p);

    void visitArrType(ArrType *p); /* abstract class */
    void visitIntArrType(IntArrType *p);

    void visitStrArrType(StrArrType *p);

    void visitBoolArrType(BoolArrType *p);

    void visitClassArrType(ClassArrType *p);

    void visitType(Type *p); /* abstract class */
    void visitInt(Int *p);

    void visitStr(Str *p);

    void visitBool(Bool *p);

    void visitVoid(Void *p);

    void visitArr(Arr *p);

    void visitClass(Class *p);

    void visitFun(Fun *p);

    void visitArrDimType(ArrDimType *p); /* abstract class */
    void visitDimType(DimType *p);

    void visitListArrDimType(ListArrDimType *p);

    void iterListArrDimType(ListArrDimType::const_iterator i, ListArrDimType::const_iterator j);

    void visitListType(ListType *p);

    void iterListType(ListType::const_iterator i, ListType::const_iterator j);

    void visitDimDef(DimDef *p); /* abstract class */
    void visitArrDimDef(ArrDimDef *p);

    void visitListDimDef(ListDimDef *p);

    void iterListDimDef(ListDimDef::const_iterator i, ListDimDef::const_iterator j);

    void visitExpr(Expr *p); /* abstract class */
    void visitEVar(EVar *p);

    void visitEBracketVar(EBracketVar *p);

    void visitEComplex(EComplex *p);

    void visitENullCast(ENullCast *p);

    void visitELitInt(ELitInt *p);

    void visitELitTrue(ELitTrue *p);

    void visitELitFalse(ELitFalse *p);

    void visitEString(EString *p);

    void visitNeg(Neg *p);

    void visitNot(Not *p);

    void visitEMul(EMul *p);

    void visitEAdd(EAdd *p);

    void visitERel(ERel *p);

    void visitEAnd(EAnd *p);

    void visitEOr(EOr *p);

    void visitListComplexPart(ListComplexPart *p);

    void iterListComplexPart(ListComplexPart::const_iterator i, ListComplexPart::const_iterator j);

    void visitListExpr(ListExpr *p);

    void iterListExpr(ListExpr::const_iterator i, ListExpr::const_iterator j);

    void visitAddOp(AddOp *p); /* abstract class */
    void visitPlus(Plus *p);

    void visitMinus(Minus *p);

    void visitMulOp(MulOp *p); /* abstract class */
    void visitTimes(Times *p);

    void visitDiv(Div *p);

    void visitMod(Mod *p);

    void visitRelOp(RelOp *p); /* abstract class */
    void visitLTH(LTH *p);

    void visitLE(LE *p);

    void visitGTH(GTH *p);

    void visitGE(GE *p);

    void visitEQU(EQU *p);

    void visitNE(NE *p);

    void visitInteger(Integer i);

    void visitDouble(Double d);

    void visitChar(Char c);

    void visitString(String s);

    void visitIdent(String s);

protected:
    char *buf_;
    int cur_, buf_size;

    void inline bufAppend(const char *s) {
        int end = cur_ + strlen(s);
        if (end >= buf_size) {
            do buf_size *= 2; /* Double the buffer size */
            while (end >= buf_size);
            resizeBuffer();
        }
        strcpy(&buf_[cur_], s);
        cur_ = end;
    }

    void inline bufAppend(const char c) {
        if (cur_ + 1 >= buf_size) {
            buf_size *= 2; /* Double the buffer size */
            resizeBuffer();
        }
        buf_[cur_] = c;
        buf_[++cur_] = 0;
    }

    void inline bufAppend(String str) {
        const char *s = str.c_str();
        bufAppend(s);
    }

    void inline bufReset(void) {
        if (buf_) free(buf_);
        buf_size = BUFFER_INITIAL;
        buf_ = (char *) malloc(buf_size);
        if (!buf_) {
            fprintf(stderr, "Error: Out of memory while allocating buffer!\n");
            exit(1);
        }
        memset(buf_, 0, buf_size);
        cur_ = 0;
    }

    void inline resizeBuffer(void) {
        char *temp = (char *) malloc(buf_size);
        if (!temp) {
            fprintf(stderr, "Error: Out of memory while attempting to grow buffer!\n");
            exit(1);
        }
        if (buf_) {
            strcpy(temp, buf_);
            free(buf_);
        }
        buf_ = temp;
    }
};


class ShowAbsyn : public Visitor {
public:
    ShowAbsyn(void);

    ~ShowAbsyn(void);

    char *show(Visitable *v);

    void visitProgram(Program *p); /* abstract class */
    void visitProg(Prog *p);

    void visitTopDef(TopDef *p); /* abstract class */
    void visitFnDef(FnDef *p);

    void visitClassDef(ClassDef *p);

    void visitClassExtendDef(ClassExtendDef *p);

    void visitListClassMember(ListClassMember *p);

    void iterListClassMember(ListClassMember::const_iterator i, ListClassMember::const_iterator j);

    void visitListTopDef(ListTopDef *p);

    void iterListTopDef(ListTopDef::const_iterator i, ListTopDef::const_iterator j);

    void visitArg(Arg *p); /* abstract class */
    void visitAr(Ar *p);

    void visitListArg(ListArg *p);

    void iterListArg(ListArg::const_iterator i, ListArg::const_iterator j);

    void visitClassMember(ClassMember *p); /* abstract class */
    void visitAttrMember(AttrMember *p);

    void visitMethodMember(MethodMember *p);

    void visitBlock(Block *p); /* abstract class */
    void visitBlk(Blk *p);

    void visitListStmt(ListStmt *p);

    void iterListStmt(ListStmt::const_iterator i, ListStmt::const_iterator j);

    void visitStmt(Stmt *p); /* abstract class */
    void visitEmpty(Empty *p);

    void visitBStmt(BStmt *p);

    void visitDecl(Decl *p);

    void visitAss(Ass *p);

    void visitIncr(Incr *p);

    void visitDecr(Decr *p);

    void visitRet(Ret *p);

    void visitVRet(VRet *p);

    void visitCond(Cond *p);

    void visitCondElse(CondElse *p);

    void visitWhile(While *p);

    void visitForEach(ForEach *p);

    void visitSExp(SExp *p);

    void visitItem(Item *p); /* abstract class */
    void visitNoInit(NoInit *p);

    void visitInit(Init *p);

    void visitListItem(ListItem *p);

    void iterListItem(ListItem::const_iterator i, ListItem::const_iterator j);

    void visitComplexStart(ComplexStart *p); /* abstract class */
    void visitCBracketed(CBracketed *p);

    void visitCMember(CMember *p);

    void visitCArray(CArray *p);

    void visitCFunction(CFunction *p);

    void visitNewObject(NewObject *p);

    void visitComplexPart(ComplexPart *p); /* abstract class */
    void visitVariable(Variable *p);

    void visitArrElement(ArrElement *p);

    void visitMethod(Method *p);

    void visitMemberAccess(MemberAccess *p);

    void visitArrType(ArrType *p); /* abstract class */
    void visitIntArrType(IntArrType *p);

    void visitStrArrType(StrArrType *p);

    void visitBoolArrType(BoolArrType *p);

    void visitClassArrType(ClassArrType *p);

    void visitType(Type *p); /* abstract class */
    void visitInt(Int *p);

    void visitStr(Str *p);

    void visitBool(Bool *p);

    void visitVoid(Void *p);

    void visitArr(Arr *p);

    void visitClass(Class *p);

    void visitFun(Fun *p);

    void visitArrDimType(ArrDimType *p); /* abstract class */
    void visitDimType(DimType *p);

    void visitListArrDimType(ListArrDimType *p);

    void iterListArrDimType(ListArrDimType::const_iterator i, ListArrDimType::const_iterator j);

    void visitListType(ListType *p);

    void iterListType(ListType::const_iterator i, ListType::const_iterator j);

    void visitDimDef(DimDef *p); /* abstract class */
    void visitArrDimDef(ArrDimDef *p);

    void visitListDimDef(ListDimDef *p);

    void iterListDimDef(ListDimDef::const_iterator i, ListDimDef::const_iterator j);

    void visitExpr(Expr *p); /* abstract class */
    void visitEVar(EVar *p);

    void visitEBracketVar(EBracketVar *p);

    void visitEComplex(EComplex *p);

    void visitENullCast(ENullCast *p);

    void visitELitInt(ELitInt *p);

    void visitELitTrue(ELitTrue *p);

    void visitELitFalse(ELitFalse *p);

    void visitEString(EString *p);

    void visitNeg(Neg *p);

    void visitNot(Not *p);

    void visitEMul(EMul *p);

    void visitEAdd(EAdd *p);

    void visitERel(ERel *p);

    void visitEAnd(EAnd *p);

    void visitEOr(EOr *p);

    void visitListComplexPart(ListComplexPart *p);

    void iterListComplexPart(ListComplexPart::const_iterator i, ListComplexPart::const_iterator j);

    void visitListExpr(ListExpr *p);

    void iterListExpr(ListExpr::const_iterator i, ListExpr::const_iterator j);

    void visitAddOp(AddOp *p); /* abstract class */
    void visitPlus(Plus *p);

    void visitMinus(Minus *p);

    void visitMulOp(MulOp *p); /* abstract class */
    void visitTimes(Times *p);

    void visitDiv(Div *p);

    void visitMod(Mod *p);

    void visitRelOp(RelOp *p); /* abstract class */
    void visitLTH(LTH *p);

    void visitLE(LE *p);

    void visitGTH(GTH *p);

    void visitGE(GE *p);

    void visitEQU(EQU *p);

    void visitNE(NE *p);

    void visitInteger(Integer i);

    void visitDouble(Double d);

    void visitChar(Char c);

    void visitString(String s);

    void visitIdent(String s);

protected:
    char *buf_;
    int cur_, buf_size;

    void inline bufAppend(const char *s) {
        int end = cur_ + strlen(s);
        if (end >= buf_size) {
            do buf_size *= 2; /* Double the buffer size */
            while (end >= buf_size);
            resizeBuffer();
        }
        strcpy(&buf_[cur_], s);
        cur_ = end;
    }

    void inline bufAppend(const char c) {
        if (cur_ + 1 >= buf_size) {
            buf_size *= 2; /* Double the buffer size */
            resizeBuffer();
        }
        buf_[cur_] = c;
        buf_[++cur_] = 0;
    }

    void inline bufAppend(String str) {
        const char *s = str.c_str();
        bufAppend(s);
    }

    void inline bufReset(void) {
        if (buf_) free(buf_);
        buf_size = BUFFER_INITIAL;
        buf_ = (char *) malloc(buf_size);
        if (!buf_) {
            fprintf(stderr, "Error: Out of memory while allocating buffer!\n");
            exit(1);
        }
        memset(buf_, 0, buf_size);
        cur_ = 0;
    }

    void inline resizeBuffer(void) {
        char *temp = (char *) malloc(buf_size);
        if (!temp) {
            fprintf(stderr, "Error: Out of memory while attempting to grow buffer!\n");
            exit(1);
        }
        if (buf_) {
            strcpy(temp, buf_);
            free(buf_);
        }
        buf_ = temp;
    }
};


#endif

